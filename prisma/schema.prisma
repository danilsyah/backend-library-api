// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// provide database
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// table users
model User {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  email     String    @unique(map: "email") @db.VarChar(255)
  password  String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(0)

  @@map("users")
}

// table members
model Member {
  id         Int       @id @default(autoincrement())
  code       String?   @unique(map: "code") @db.VarChar(255)
  name       String?   @db.VarChar(255)
  penaltyEnd DateTime? @db.Timestamp(0)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime? @db.Timestamp(0)
  rentals    Rental[]

  @@map("members")
}

// tabel books
model Book {
  id        Int       @id @default(autoincrement())
  code      String?   @unique(map: "code") @db.VarChar(255)
  title     String?   @db.VarChar(255)
  author    String?   @db.VarChar(255)
  stock     Int       @db.Int()
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime? @db.Timestamp(0)
  rentals   Rental[]

  @@map("books")
}

// table rentals
model Rental {
  id         Int       @id @default(autoincrement())
  memberId   Int
  bookId     Int
  borrowedAt DateTime? @default(now())
  returnedAt DateTime?

  book   Book   @relation(fields: [bookId], references: [id])
  member Member @relation(fields: [memberId], references: [id])

  @@map("rentals")
}
